//Optimal
T=O(N)
S=O(1)
class Solution {
    public boolean isValidBST(TreeNode root) {
        return root==null?true:isValidBST(root, null, null);
    }

    public boolean isValidBST(TreeNode root, Integer min, Integer max) {
        if(root==null){
            return true;
        }
        if((min!=null && root.val<=min) || (max!=null && root.val>=max)){
            return false;
        }
        return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);
    }
}

//SubOptimal
class Solution2 {
    public boolean isValidBST(TreeNode root) {
        
        return root==null?true:isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean isValidBST(TreeNode root, long min, long max) {
        if(root==null){
            return true;
        }
        if(root.left!=null && (root.left.val>=root.val || root.left.val<=min ||
         !isValidBST(root.left, min, Math.min(max, root.val)))){
            return false;
        }
        if(root.right!=null && (root.right.val<=root.val || root.right.val>=max ||
         !isValidBST(root.right, Math.max(min, root.val), max))){
            return false;
        }
        return true;
    }
}
